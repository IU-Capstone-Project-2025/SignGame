name: Check Project Structure and Lint

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate-structure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for level folders
        run: |
          if [ -d "static_ml" ]; then
            echo "‚úÖ Found ML model!"
          else
            echo "‚ùå You somewhere miss our ML model("
            exit 1
          fi

          if [ -d "ProjectSettings" ]; then
            echo "‚úÖ Found settings managers!"
          else
            echo "‚ùå You somewhere miss our settings managers("
            exit 1
          fi
          
          if [ -d "Assets" ]; then
            echo "‚úÖ 'Assets' folder found!"
            if [ -d "Assets/Scenes" ]; then
              echo "‚úÖ 'Assets/Scenes' folder found!"
            else
              echo "‚ùå 'Assets/Scenes' folder is missing!"
              exit 1
            fi
          else
            echo "‚ùå 'Assets' folder is missing!"
            exit 1
          fi

      - name: Check for menu and level scenes
        run: |
          echo "üîç Searching start menu scene..."
          if [ -f "Assets/Scenes/MainMenuScene.unity" ]; then
            echo "‚úÖ 'MainMenuScene.unity' found"
          else
            echo "‚ùå Start menu 'MainMenuScene.unity' is missing!"
          fi
          echo "üîç Searching for level files..."
          matches=$(find Assets/Scenes -type f -regextype posix-extended -regex ".*/Level[A-Z][a-zA-Z]{0,9}[0-9]{3}\.unity")
          if [ -n "$matches" ]; then
            echo "‚úÖ Found level files:"
            echo "$matches"
          else
            echo "‚ö†Ô∏è No matching level files found"
          fi
 
  code-lint:
    runs-on: ubuntu-latest
    needs: validate-structure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install CSharpier tool
        run: dotnet tool install -g csharpier

      - name: Run code style check with CSharpier
        run: |
          export PATH="$PATH:$HOME/.dotnet/tools"

          echo "üîç Searching for .cs files..."
          cs_files=$(find . -type f -name "*.cs")
          echo "üìÇ Files to be checked:"
          echo "$cs_files"
          echo "$cs_files" > cs_file_list.txt

          issue_count=0
          while IFS= read -r file; do
            output=$(csharpier --check "$file" 2>&1 || true)
            echo "$output"
            if echo "$output" | grep -q "formatted"; then
              issue_count=$((issue_count + 1))
            fi
          done < cs_file_list.txt

          echo "‚ö†Ô∏è Total formatting issues: $issue_count"

          if (( $(echo "$issue_count > 100" | bc -l) )); then
            echo "‚ùå Code style too poor"
            exit 1
          fi
